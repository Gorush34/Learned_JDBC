////////////////////////////////////////////// Member_Main 클래스를 통해서 메뉴를 시작한다! //////////////////////////////////////////////////

package jdbc.day03;

import java.util.Scanner;

public class Member_Main {

	public static void main(String[] args) {
		
		MemberCtrl mctrl = new MemberCtrl();
		Scanner sc = new Scanner(System.in);
		
		mctrl.menu_Start(sc);
		
		
		sc.close();
		System.out.println("~~~ 프로그램 종료 ~~~");
		
	} // end of main()-------------------------------------

}





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// MemberCtrl 클래스에서 메뉴의 설정과 메뉴의 기능을 실행한다. /////////////////////////////////

package jdbc.day03;

import java.util.*;

public class MemberCtrl {
	
	// attribute, field, property, 속성
	InterMemberDAO mdao = new MemberDAO();
	
	
	
	// operation, method, behavior, 기능
	
	
	// *** 시작메뉴를 보여주는 메소드 *** // 
	public void menu_Start(Scanner sc) {
		
		
		MemberDTO member = null;
		String s_Choice = "";

		
		do {
//			String loginName = (member != null)?"[" + member.getName() + "님 로그인 중..]":"";
//			String login_logout = (member != null)?"로그아웃":"로그인";
			String loginName = "";
			String login_logout = "로그인";
			String menu_myInfo = "";
			
			if(member != null) { // 삼항연산자 계속 쓰는거보다 조건 하나로 묶어버리자
				loginName = "[" + member.getName() + "님 로그인 중..]";
				login_logout = "로그아웃";
				menu_myInfo = "4. 나의 정보보기       5. 회원탈퇴하기\n";
			}
			
			
			System.out.println("\n >>> ----- 시작메뉴 "+loginName+" ----- <<< \n"
							 + "1. 회원가입   2."+login_logout+"   3.프로그램종료\n"
							 + menu_myInfo
							 + "---------------------------------\n");
			
			System.out.print("▷ 메뉴번호선택 : ");
			s_Choice = sc.nextLine();
			
			switch (s_Choice) {
			
				case "1": // 회원가입
					memberRegister(sc);
					break;
					
				case "2": // 로그인 또는 로그아
					if( "로그인".equals(login_logout) ) {
						member = login(sc);  // 로그인 시도하기
						// 로그인이 성공되어지면 return type 은 MemberDTO로 받아와야 한다. => MemberDTO에서 select 하니까!
					}
					else {
						member = null; // 로그아웃하기
						System.out.println(">>> 로그아웃 되었습니다. <<< \n");
					}
					
					
					break;			
				
				case "3": // 프로그램 종료
					
					break;
				
				case "4": // 나의 정보보기
					if(member != null) { // 로그인 상태여야 나의 정보를 볼 수 있기 때문에
						// System.out.println(member);
						// 또는 
						System.out.println(member.toString());
					}
					else { // 로그인 상태가 아니라면
						System.out.println(">>> 메뉴에 없는 번호입니다. 다시 선택하세요.<<< \n");
					}
					
					break;
				
				case "5": // 회원탈퇴
					if(member != null) { 
						int n = mdao.MemberDelete( member.getUserseq() );
						
						if(n == 1) { // 업데이트가 성공했다면
							System.out.println(">>> 회원탈퇴가 성공하였습니다. <<<");
							member = null; // 로그아웃 처리해줘야 한다.
						}
					}
					else { // 로그인 상태가 아니라면
						System.out.println(">>> 메뉴에 없는 번호입니다. 다시 선택하세요.<<< \n");
					}
					
					break;
					
				default:
					System.out.println(">>> 메뉴에 없는 번호입니다. 다시 선택하세요.<<< \n");
					break;
			} // end of switch---------------------------------------
			
			
		} while( !("3".equals(s_Choice)) ); // end of do~while-----------------------------------
		
		
		
	} // end of public void menu_Start(Scanner sc)---------------------------
	
	
	// *** 회원가입을 해주는 메소드 *** //
	private void memberRegister(Scanner sc) {
		
		System.out.println("\n >>> ---- 회원가입 ---- <<< ");
		
		System.out.print("1. 아이디 : ");
		String userid = sc.nextLine();
		// SQL 컬럼명과 일치시켜주는게 좋다.
		System.out.print("2. 비밀번호 : ");
		String passwd = sc.nextLine();
		
		System.out.print("3. 회원명 : ");
		String name = sc.nextLine();
		
		System.out.print("4. 연락처(휴대폰) : ");
		String mobile = sc.nextLine();
		
		MemberDTO member = new MemberDTO();
		member.setUserid(userid);
		member.setPasswd(passwd);
		member.setName(name);
		member.setMobile(mobile);
		
		int n = mdao.memberRegister(member);
		// DTO로 받아온 데이터(member)로 인터페이스를 통해 MemberDAO안의 오버라이딩되어진 메소드를 활용하여 회원가입 절차를 거친다.
		
		if( n == 1 ) {
			System.out.println("\n >>> 회원가입을 축하드립니다!! <<< \n");
		}
		
	} // end of private void memberRegister(Scanner sc)--------------------------------
	
	
	
	
	// 로그인을 처리해주는 메소드 생성하기
	private MemberDTO login(Scanner sc) {
		
		MemberDTO member = null; // 초기값 지정
		
		System.out.println("\n >>> ---- 로그인 ---- <<< ");
		
		System.out.print(" ▷ 아이디 : ");
		String userid = sc.nextLine();
		
		System.out.print(" ▷ 비밀번호 : ");
		String passwd = sc.nextLine();
		
		// 받은 id와 pw를 where을 사용한 select릃 하기 위해 하나로 모아서 보낸다 ==> where 나오면 Map 해야된다!!
		
		Map<String, String> paramap =  new HashMap<>(); // 오른쪽 <>안에 있는 것은 생략 가능(원칙상 왼쪽 <> 내용 써야함).
		// 이 HashMap 의 Key값은 String type이고, value값도 String 타입이다. 다형성으로 인해 HashMap을 Map으로 쓸 수 있음.
		
		paramap.put("userid", userid); // "userid"가 Key값인 곳에 sc를 통해서 입력한 userid를 넣겠다.
		paramap.put("passwd", passwd); // "passwd"가 Key값인 곳에 sc를 통해 입력한 passwd를 넣겠다.
		
		// 입력한 정보가 일치하는 것이 있는지 뭉쳐놓은 Map을 DAO로 보내야 한다. => Database 관련 업무처리는 DAO에서 한다.
		member = mdao.login(paramap);
		// MemberDAO에서 parameter 가 paramap인 login메소드를 실행하여 return값을 타입이 MemberDTO인 member에 받아온다.
		// return 값이 null이 아니면 로그인이 성공, null이면 로그인 실패
		
		if(member != null) {
			System.out.println("\n >>> 로그인 성공!! <<< \n");
		}
		
		else {
			System.out.println("\n >>> 로그인 실패!! <<< \n");
		}
		
		
		return member; // 리턴
		
	} //end of private MemberDTO login(Scanner sc)----------------------
	
}

