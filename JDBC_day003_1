////////////////////////////////////////////// Member_Main 클래스를 통해서 메뉴를 시작한다! //////////////////////////////////////////////////

package jdbc.day03;

import java.util.Scanner;

public class Member_Main {

	public static void main(String[] args) {
		
		MemberCtrl mctrl = new MemberCtrl();
		Scanner sc = new Scanner(System.in);
		
		mctrl.menu_Start(sc);
		
		
		sc.close();
		System.out.println("~~~ 프로그램 종료 ~~~");
		
	} // end of main()-------------------------------------

}





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// MemberCtrl 클래스에서 메뉴의 설정과 메뉴의 기능을 실행한다. /////////////////////////////////

package jdbc.day03;

import java.util.*;

public class MemberCtrl {
	
	// attribute, field, property, 속성
	InterMemberDAO mdao = new MemberDAO();
	
	
	
	// operation, method, behavior, 기능
	
	
	// *** 시작메뉴를 보여주는 메소드 *** // 
	public void menu_Start(Scanner sc) {
		
		
		MemberDTO member = null;
		String s_Choice = "";

		
		do {
//			String loginName = (member != null)?"[" + member.getName() + "님 로그인 중..]":"";
//			String login_logout = (member != null)?"로그아웃":"로그인";
			String loginName = "";
			String login_logout = "로그인";
			String menu_myInfo = "";
			
			if(member != null) { // 삼항연산자 계속 쓰는거보다 조건 하나로 묶어버리자
				loginName = "[" + member.getName() + "님 로그인 중..]";
				login_logout = "로그아웃";
				menu_myInfo = "4. 나의 정보보기       5. 회원탈퇴하기\n";
			}
			
			
			System.out.println("\n >>> ----- 시작메뉴 "+loginName+" ----- <<< \n"
							 + "1. 회원가입   2."+login_logout+"   3.프로그램종료\n"
							 + menu_myInfo
							 + "---------------------------------\n");
			
			System.out.print("▷ 메뉴번호선택 : ");
			s_Choice = sc.nextLine();
			
			switch (s_Choice) {
			
				case "1": // 회원가입
					memberRegister(sc);
					break;
					
				case "2": // 로그인 또는 로그아
					if( "로그인".equals(login_logout) ) {
						member = login(sc);  // 로그인 시도하기
						// 로그인이 성공되어지면 return type 은 MemberDTO로 받아와야 한다. => MemberDTO에서 select 하니까!
					}
					else {
						member = null; // 로그아웃하기
						System.out.println(">>> 로그아웃 되었습니다. <<< \n");
					}
					
					
					break;			
				
				case "3": // 프로그램 종료
					
					break;
				
				case "4": // 나의 정보보기
					if(member != null) { // 로그인 상태여야 나의 정보를 볼 수 있기 때문에
						// System.out.println(member);
						// 또는 
						System.out.println(member.toString());
					}
					else { // 로그인 상태가 아니라면
						System.out.println(">>> 메뉴에 없는 번호입니다. 다시 선택하세요.<<< \n");
					}
					
					break;
				
				case "5": // 회원탈퇴
					if(member != null) { 
						int n = mdao.MemberDelete( member.getUserseq() );
						
						if(n == 1) { // 업데이트가 성공했다면
							System.out.println(">>> 회원탈퇴가 성공하였습니다. <<<");
							member = null; // 로그아웃 처리해줘야 한다.
						}
					}
					else { // 로그인 상태가 아니라면
						System.out.println(">>> 메뉴에 없는 번호입니다. 다시 선택하세요.<<< \n");
					}
					
					break;
					
				default:
					System.out.println(">>> 메뉴에 없는 번호입니다. 다시 선택하세요.<<< \n");
					break;
			} // end of switch---------------------------------------
			
			
		} while( !("3".equals(s_Choice)) ); // end of do~while-----------------------------------
		
		
		
	} // end of public void menu_Start(Scanner sc)---------------------------
	
	
	// *** 회원가입을 해주는 메소드 *** //
	private void memberRegister(Scanner sc) {
		
		System.out.println("\n >>> ---- 회원가입 ---- <<< ");
		
		System.out.print("1. 아이디 : ");
		String userid = sc.nextLine();
		// SQL 컬럼명과 일치시켜주는게 좋다.
		System.out.print("2. 비밀번호 : ");
		String passwd = sc.nextLine();
		
		System.out.print("3. 회원명 : ");
		String name = sc.nextLine();
		
		System.out.print("4. 연락처(휴대폰) : ");
		String mobile = sc.nextLine();
		
		MemberDTO member = new MemberDTO();
		member.setUserid(userid);
		member.setPasswd(passwd);
		member.setName(name);
		member.setMobile(mobile);
		
		int n = mdao.memberRegister(member);
		// DTO로 받아온 데이터(member)로 인터페이스를 통해 MemberDAO안의 오버라이딩되어진 메소드를 활용하여 회원가입 절차를 거친다.
		
		if( n == 1 ) {
			System.out.println("\n >>> 회원가입을 축하드립니다!! <<< \n");
		}
		
	} // end of private void memberRegister(Scanner sc)--------------------------------
	
	
	
	
	// 로그인을 처리해주는 메소드 생성하기
	private MemberDTO login(Scanner sc) {
		
		MemberDTO member = null; // 초기값 지정
		
		System.out.println("\n >>> ---- 로그인 ---- <<< ");
		
		System.out.print(" ▷ 아이디 : ");
		String userid = sc.nextLine();
		
		System.out.print(" ▷ 비밀번호 : ");
		String passwd = sc.nextLine();
		
		// 받은 id와 pw를 where을 사용한 select릃 하기 위해 하나로 모아서 보낸다 ==> where 나오면 Map 해야된다!!
		
		Map<String, String> paramap =  new HashMap<>(); // 오른쪽 <>안에 있는 것은 생략 가능(원칙상 왼쪽 <> 내용 써야함).
		// 이 HashMap 의 Key값은 String type이고, value값도 String 타입이다. 다형성으로 인해 HashMap을 Map으로 쓸 수 있음.
		
		paramap.put("userid", userid); // "userid"가 Key값인 곳에 sc를 통해서 입력한 userid를 넣겠다.
		paramap.put("passwd", passwd); // "passwd"가 Key값인 곳에 sc를 통해 입력한 passwd를 넣겠다.
		
		// 입력한 정보가 일치하는 것이 있는지 뭉쳐놓은 Map을 DAO로 보내야 한다. => Database 관련 업무처리는 DAO에서 한다.
		member = mdao.login(paramap);
		// MemberDAO에서 parameter 가 paramap인 login메소드를 실행하여 return값을 타입이 MemberDTO인 member에 받아온다.
		// return 값이 null이 아니면 로그인이 성공, null이면 로그인 실패
		
		if(member != null) {
			System.out.println("\n >>> 로그인 성공!! <<< \n");
		}
		
		else {
			System.out.println("\n >>> 로그인 실패!! <<< \n");
		}
		
		
		return member; // 리턴
		
	} //end of private MemberDTO login(Scanner sc)----------------------
	
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// 인터페이스 InterMemberDAO를 통해 여러 메소드를 파악할 수 있다.(목차)  /////////////////////////////////

package jdbc.day03;

import java.util.Map;

public interface InterMemberDAO {

	// 회원가입(insert) 메소드
	int memberRegister(MemberDTO member);
	// 몇 행이 들어왔나 Return 해야하기 때문에 int type으로 받음
	
	// 로그인처리(select) 메소드
	MemberDTO login(Map<String, String> paraMap);
	// parameter가 Map인 모은 정보를 받아서 login 메소드를 통해 MemberDTO의 값을 return 해야 함.
	
	// 회원탈퇴(update) 메소드
	int MemberDelete(int userseq);
	// userseq 는 고유한 값이므로 이 parameter를 통해 메소드를 실행해서
	// 1이면 정상적으로 실행됨( 1 행이 update 된거니까), 0이면 실행실패
	
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// MemberDAO는 데이터베이스에 연결하여 SQL구문을 실행시켜주는 객체이다. /////////////////////////////////

package jdbc.day03;

import java.sql.*;
import java.util.Map;

//DAO(Database Access Object) ==> 데이터베이스에 연결하여 SQL구문을 실행시켜주는 객체

public class MemberDAO implements InterMemberDAO {

	// attribute, field, property, 속성
	Connection conn = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	
	
	
	// operation, method, behavior, 기능
	
	// == 자원반납을 해주는 메소드 == //
	private void close() {
		try {
			
			if(rs != null) rs.close(); // 종료는 항상 역순으로(가장 나중에킨거 먼저 닫아라)
			if(pstmt != null) pstmt.close();
			if(conn != null) conn.close();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	} // end of private void close() -----------------------------------


	// 회원가입(insert) 메소드 구현하기 ===
	@Override
	public int memberRegister(MemberDTO member) {
		
		int result = 0;
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			conn = DriverManager.getConnection("jdbc:oracle:thin:@127.0.0.1:1521:xe", "HR", "cclass");
			
			String sql = " insert into jdbc_member(userseq, userid, passwd, name, mobile) "
					   + " values(userseq.nextval, ?, ?, ?, ?) ";
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setString( 1, member.getUserid() ); // MemberDTO에 있는 정보를 가져온다.
			pstmt.setString( 2, member.getPasswd() );
			pstmt.setString( 3, member.getName() );
			pstmt.setString( 4, member.getMobile() );
			
			result = pstmt.executeUpdate();
			
			
		} catch (ClassNotFoundException e) {
			System.out.println(">> ojdbc6.jar 파일이 없습니다. << ");
		} catch (SQLIntegrityConstraintViolationException e) {
			// System.out.println("에러코드번호 : " + e.getErrorCode());
			// System.out.println("에러메시지 : " + e.getMessage());
			
			if(e.getErrorCode() == 1) {
				System.out.println(" >> 아이디가 중복되었습니다. 새로운 아이디를 입력하세요!! <<");
				// 여기서 에러가뜨면 result값은 초기값 0이 되고 메소드를 호출한 MemberCtrl클래스에서 초기값 0이 반환되어진다.
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close();
		}
		
		return result;
	} // end of public int memberRegister(MemberDTO member)

	
	
	
	// === 로그인처리(select) 메소드 구현하기 === //
	@Override
	public MemberDTO login(Map<String, String> paraMap) {
		
		MemberDTO member = null;
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");// 오라클 드라이버 연결
			
			conn = DriverManager.getConnection("jdbc:oracle:thin:@127.0.0.1:1521:xe", "HR", "cclass"); // 어디에 갈지 설정
			
			String sql = " select userseq, name, mobile, point, to_char(registerday, 'yyyy-mm-dd') AS registerday "+
						 " from jdbc_member "+
						 " where status = 1 and userid = ? and passwd = ? ";
						 // AS에 " " 를 쓰면 \" \" 로 써야하고 SQL에서도 똑같이 써야한다.
			pstmt = conn.prepareStatement(sql);
			pstmt.setString( 1, paraMap.get("userid") );
			// 위치홀더 1번째에 넣을 값을 가져오는데, 위치는 parameter의 정의된 위치가 MemberCtrl이고, paraMap의 Key값을 가져온다.
			pstmt.setString( 2, paraMap.get("passwd") );
			
			rs = pstmt.executeQuery();
			// 우편배달부가 SQL의 값을 받아오기 위해 실행한다.
			
			if( rs.next() ) { // 행이 값이 있다면
				member = new MemberDTO(); // MemberDTO에서 값을 받아오기 위해 객체를 하나 생성.
				// member.setName( rs.getString(1) ); // rs에서 받아온 select 컬럼 중 1번째 값을 받아와서 member객체 name 변수에 넣는다.
				// 또는
				member.setUserseq( rs.getInt("USERSEQ"));
				member.setName( rs.getString("NAME") );
				member.setMobile( rs.getString("MOBILE") );
				member.setPoint( rs.getInt("POINT") );
				member.setRegisterday( rs.getString("REGISTERDAY") );
				// status 는 가져올 필요 없음. 조건절에서 이미 1이어야 나오기 때문에
			}
			
			
			
		} catch (ClassNotFoundException e) {
			System.out.println(">> ojdbc6.jar 파일이 없습니다. << ");
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close();
		}
		
		
		return member;
	} // end of public MemberDTO login(Map<String, String> paraMap) ----------------------


	
	
	// === 회원탈퇴(update) 메소드 구현하기 === //
	@Override
	public int MemberDelete(int userseq) { // userseq를 받아서 그 userseq의 status의 값을 0으로 해준다.
		
		int result = 0;
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");// 오라클 드라이버 연결
			
			conn = DriverManager.getConnection("jdbc:oracle:thin:@127.0.0.1:1521:xe", "HR", "cclass"); // 어디에 갈지 설정
			
			String sql = " update jdbc_member set status = 0 "
					   + " where userseq = ? ";
			// jdbc_member 테이블의 userseq가 ? 번인 status column을 0으로 하겠다. 
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt( 1, userseq );
			// ?의 첫번째는 parameter로 받은 userseq이며 타입은 int다.
			
			result = pstmt.executeUpdate();
			// 업데이트를 실행하고 결과를 result에 저장한다. 1은 성공
			
		} catch (ClassNotFoundException e) {
			System.out.println(">> ojdbc6.jar 파일이 없습니다. << ");
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close();
		}
		
		return result;

		
	} // end of public int MemberDelete(int userseq)------------
	
	
	
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// MemberDTO는 데이터전송(운반)의 역할을 하는 객체이다. /////////////////////////////////

package jdbc.day03;

//=== DTO(Data Transfer Object, 데이터전송(운반)객체 )
//쉽게 말해서 DTO는 테이블의 1개 행(ROW)을 말한다.
//어떤 테이블에 데이터를 insert 하고자 할때 DTO에 담아서 보낸다.
//또한 어떤 테이블에서 데이터를 select 하고자 할때도 DTO에 담아서 읽어온다.
// ***** Database 의 insert 는 DTO에 담김!!! select는 DTO에서 읽어옴!!!!

public class MemberDTO {

	// attribute, field, property, 속성
	
	private int userseq;			// 회원번호
	private String userid;			// 회원아이디
	private String passwd;			// 회원암호
	private String name;			// 회원명
	private String mobile;			// 연락처
	private int point;				// 포인트
	private String registerday;		// 가입일자
	private int status;				// status 값이 1이면 정상, 0 이면 탈퇴
	
	
	public int getUserseq() {
		return userseq;
	}
	public void setUserseq(int userseq) {
		this.userseq = userseq;
	}
	public String getUserid() {
		return userid;
	}
	public void setUserid(String userid) {
		this.userid = userid;
	}
	public String getPasswd() {
		return passwd;
	}
	public void setPasswd(String passwd) {
		this.passwd = passwd;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getMobile() {
		return mobile;
	}
	public void setMobile(String mobile) {
		this.mobile = mobile;
	}
	public int getPoint() {
		return point;
	}
	public void setPoint(int point) {
		this.point = point;
	}
	public String getRegisterday() {
		return registerday;
	}
	public void setRegisterday(String registerday) {
		this.registerday = registerday;
	}
	public int getStatus() {
		return status;
	}
	public void setStatus(int status) {
		this.status = status;
	}

	///////////////////////////////////////////////////////////////
	
	@Override // 오버라이딩시 부모의 접근제한자 범위보다 크거나 같아야 함.
	public String toString() {
		
		return "◇ 성명 : " + name + "\n"
			 + "◇ 휴대폰 : " + mobile + "\n"
			 + "◇ 포인트 : " + point + "\n"
			 + "◇ 가입일자 : " + registerday + "\n";
	}
	
}
