// 최근 1주일간 일자별 게시글 작성건수 메소드 생성 및 실행

// 컨트롤러 코드

case "7": // 최근 1주일간 일자별 게시글 작성건수
				statisticsByWeek();
				break;
        
        
	// **** 최근 1주일간 일자별 게시글 작성건수 ****
	private void statisticsByWeek() {
		
		System.out.println("\n------------------------------------[최근 1주일간 일자별 게시글 작성건수]------------------------------------");
		
		String title = "전체\t";
		
		// 만약 오늘이 2022-02-03 이라면
		// 			전체 2022-01-28 2022-01-29 2022-01-30 2022-01-31 2022-02-01 2022-02-02 2022-02-03
		// 이렇게 나타내고 싶다.
		for(int i=0; i<7; i++) {
			title += MyUtil.addDay(i-6) + "    "; // -6  -5  -4  -3  -2  -1  0 을 해야하기 때문에
		} // end of for------------------------
		
		System.out.println(title);
		//			전체 2022-01-28 2022-01-29 2022-01-30 2022-01-31 2022-02-01 2022-02-02 2022-02-03
		System.out.println("----------------------------------------------------------------------------------------------------------");
		
		Map<String, Integer> resultMap = bdao.statisticsByWeek(); // 최근 1주일간 일자별 게시글 작성건수를 select 해서 나오는 결과물  
		// DTO는 일반적으로 select 및 insert를 할 수 있지만 이번에는 select만 해오기 때문에 select만 해올떄는 Map을 쓴다!!!!!*****
		
    String result = resultMap.get("TOTAL") + "\t" + 
        resultMap.get("PREVIOUS6") + "\t" +
        resultMap.get("PREVIOUS5") + "\t" +
        resultMap.get("PREVIOUS4") + "\t" +
        resultMap.get("PREVIOUS3") + "\t" +
        resultMap.get("PREVIOUS2") + "\t" +
        resultMap.get("PREVIOUS1") + "\t" +
        resultMap.get("TODAY");
		
		System.out.println(result);
		
	}	// end of private void statisticsByWeek()------------------------------
        


// 최근 1주일간 일자별 게시글 작성건수 기능에 사용되는 MyUtil 클래스의 코드

	// *** 현재 날짜에서 n일 만큼 더해서 날짜형식으로 문자열로 변경하여 리턴시켜주는 메소드 *** //
	public static String addDay(int n) {
				
		Calendar currentDate = Calendar.getInstance(); 
		   // 현재날짜와 시간을 얻어온다.
		
		currentDate.add(Calendar.DATE, n); 
		
		// currentDate.add(Calendar.DATE, 1); 
	    // ==> currentDate(현재 날짜)에서 두번째 파라미터에 입력해준 숫자(그 단위는 첫번째 파라미터인 것이다. 지금은 Calendar.DATE 이므로 날짜수이다)만큼 더한다.
	    // ==> 위의 결과는  currentDate 값이 1일 더한 값으로 변한다.
		
		SimpleDateFormat sdatefmt = new SimpleDateFormat("yyyy-MM-dd");
		
		return sdatefmt.format(currentDate.getTime());
		
	} // end of public static String addDay(int n)-----------------
  
  
  
  
  // InterBoardDAO에 정의하고 BoardDAO 에 오버라이딩 한 코드
  
  	// 최근 1주일간 일자별 게시글 작성건수를 select 해서 나오는 결과물
	@Override
	public Map<String, Integer> statisticsByWeek() {
		
		Map<String, Integer> resultMap = new HashMap<>(); 
		
		try {
			
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			conn = DriverManager.getConnection("jdbc:oracle:thin:@127.0.0.1:1521:xe", "HR", "cclass");
			
			String sql = " select count(*) AS TOTAL "+
					"      , sum( decode( func_midnight(sysdate) - func_midnight(writeday), 6, 1, 0)  ) AS PREVIOUS6 "+
					"      , sum( decode( func_midnight(sysdate) - func_midnight(writeday), 5, 1, 0)  ) AS PREVIOUS5 "+
					"      , sum( decode( func_midnight(sysdate) - func_midnight(writeday), 4, 1, 0)  ) AS PREVIOUS4 "+
					"      , sum( decode( func_midnight(sysdate) - func_midnight(writeday), 3, 1, 0)  ) AS PREVIOUS3 "+
					"      , sum( decode( func_midnight(sysdate) - func_midnight(writeday), 2, 1, 0)  ) AS PREVIOUS2 "+
					"      , sum( decode( func_midnight(sysdate) - func_midnight(writeday), 1, 1, 0)  ) AS PREVIOUS1 "+
					"      , sum( decode( func_midnight(sysdate) - func_midnight(writeday), 0, 1, 0)  ) AS TODAY "+
					" from jdbc_board "+
					" where ( func_midnight(sysdate) - func_midnight(writeday) ) < 7 ";
			
			pstmt = conn.prepareStatement(sql);
			
			rs = pstmt.executeQuery();
			
			rs.next();
			
			resultMap.put("TOTAL", rs.getInt(1));
			resultMap.put("PREVIOUS6", rs.getInt(2));
			resultMap.put("PREVIOUS5", rs.getInt(3));
			resultMap.put("PREVIOUS4", rs.getInt(4));
			resultMap.put("PREVIOUS3", rs.getInt(5));
			resultMap.put("PREVIOUS2", rs.getInt(6));
			resultMap.put("PREVIOUS1", rs.getInt(7));
			resultMap.put("TODAY", rs.getInt(8));
			
			
			
			
		} catch (ClassNotFoundException e) {
			System.out.println(">> ojdbc6.jar 파일이 없습니다. << ");
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close();
		}
		
		return resultMap;
	} // end of public Map<String, Integer> statisticsByWeek() -----------------------------
  
  --------------------------------------------------------------------------------------------------------------------------------
  
