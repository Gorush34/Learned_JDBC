// Main에서 메뉴를 시작하는 메소드를 실행하자. ////////////////////////////////////////


package jdbc.day03.board;

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		
		TotalController ctrl = new TotalController();
		Scanner sc = new Scanner(System.in);
		
		ctrl.menu_Start(sc);
		
		sc.close();
		System.out.println("~~~ 프로그램 종료 ~~~");

	} // end of main(String[] args)---------------------------

}

//////////////////////// 여러 기능의 조작을 담당하는 TotalController 클래스에서 기능을 구현해보자. ////////////

package jdbc.day03.board;

import java.util.*;

public class TotalController {

	
	// field, attribute, property, 속성
	InterMemberDAO mdao = new MemberDAO();
	InterBoardDAO bdao = new BoardDAO();
	
	// opration, method, 기능
	
	// *** 시작메뉴 메소드 생성하기 *** // 
	
	public void menu_Start(Scanner sc) {
		
		MemberDTO member = null;
		String s_Choice = "";
		
		
		
		do {
			String loginName = "";
			String login_logout = "로그인";
			// 안쪽에서 초기화하는 이유 : 로그인 로그아웃을 member의 null으로 판단하는데
			// 종료시 member는 null이 아니지만 로그인을 해야하기 때문에 반복문 안에서 초기화를 해줘야 한다.
			
			if(member != null) {
				loginName = "["+member.getName()+" 님 로그인중..]";
				login_logout ="로그아웃";
			}
		
			System.out.println("\n >>> ----- 시작메뉴 "+loginName+" ----- <<< \n"
					 + "1. 회원가입   2."+login_logout+"   3.프로그램종료 \n"
					 + "------------------------------------------\n");
	
			System.out.print("▷ 메뉴번호선택 : ");
			s_Choice = sc.nextLine();
			
			switch (s_Choice) {
			case "1": // 회원가입
				member = memberRegister(sc);
				break;
				
			case "2": 
				if("로그인".equals(login_logout)) {// 로그인 처리
					member = login(sc); 
					
					if(member != null) { // 로그인이 성공한 경우
						menu_Board(member, sc); // 게시판 메뉴에 들어간다.
					}
				}
				else { // 로그아웃 처리
					member = null;
					System.out.println(">> 로그아웃 되었습니다. << \n");
				}
				break;
				
			case "3": // 프로그램 종료
				
				break;
	
			default:
				System.out.println(">>> 메뉴에 없는 번호입니다. 다시 선택하세요!! <<< \n");
				break;
			} // end of switch--------------------------
		
		
		} while ( !( "3".equals(s_Choice) ) );

		
	} // end of public void menu_Start(Scanner sc)---------------
  
  
  
  	// *** 회원가입하는 메소드 생성하기 *** // 
	private MemberDTO memberRegister(Scanner sc) {
		
		String userid = "";
		do {
			System.out.print(" 1. 아이디 : ");
			 userid = sc.nextLine();
			 boolean isUse = mdao.isUse_userid(userid);
			 
			if( !isUse ) {
				System.out.println("\n >> " + userid + " 아이디가 이미 사용중입니다. 다른 아이디를 입력하세요. << \n");
			}
			else {
				System.out.println("\n >> " + userid + " 아이디는 사용 가능한 아이디입니다. << \n");
				break;
			}
			
		} while (true);
		
		System.out.print(" 2. 비밀번호 : ");
		String passwd = sc.nextLine();
		System.out.print(" 3. 이름 : ");
		String name = sc.nextLine();
		System.out.print(" 4. 연락처 : ");
		String mobile = sc.nextLine();
		// 입력 받아서
		
		MemberDTO member = new MemberDTO();
		
		member.setUserid(userid);
		member.setPasswd(passwd);
		member.setName(name);
		member.setMobile(mobile);
		// DTO에 저장하고
		
		int n = mdao.memberRegister(member);
		// DAO에 보내서 결과값(0, 1)을 받아온다.
		
		if(n==1) {
			System.out.println("\n >> 회원가입 성공!! <<");
			// 위의 isUse_userid 메소드를 통해서 겹치지 않는 userid를 가지기 때문에 if가 필요없다.
			menu_Board(member, sc);
			
			return member; // 회원가입이 정상적으로 되어지면 멤버값을 return해준다.
		}
		else {
			return null; // 회원가입에 실패하면 null을 return 해준다.
		}
	
	}
