※ sql developer 로의 연결은 package에서 new -> file 이후 만들어진 file을 우클릭 -> open with -> browse를 통해 연결
※ 상단 project -> properties -> Java Compiler -> Enable project specific settings 후
        -> Compiler compliance level : 1.8 로 적용하였음.
-------------------------------------------------

package jdbc.day01;

import java.sql.*;
import java.util.Scanner;

public class DML_insert_01 {

	public static void main(String[] args) {
		
		Connection conn = null;
		// Connection conn 은 오라클 데이터베이스 서버와 연결을 맺어주는 객체 
		
		PreparedStatement pstmt = null;
		// PreparedStatement pstmt 은 Connection conn(연결할 오라클 서버)에 전송할 SQL문(편지)을 전달할 객체(우편배달부)이다.
		
		Scanner sc = new Scanner(System.in);

        try {
			// >>> 1. 오라클 드라이버 로딩 <<<  //
	        /*
	           === OracleDriver(오라클 드라이버)의 역할 ===
	           1). OracleDriver 를 메모리에 로딩시켜준다.
	           2). OracleDriver 객체를 생성해준다.
	           3). OracleDriver 객체를 DriverManager에 등록시켜준다.
	               --> DriverManager 는 여러 드라이버들을 Vector 에 저장하여 관리해주는 클래스이다.
	        */ 

			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// >>> 2. 어떤 오라클 서버와 연결을 할래? <<< //
			System.out.print("▷ 연결할 오라클 서버의 IP 주소 : ");
			String ip = sc.nextLine();
			
			conn = DriverManager.getConnection("jdbc:oracle:thin:@"+ip+":1521:xe", "HR", "cclass");
			
			// === Connection conn 기본값은 auto commit 이다. === //
			// === Connection conn 기본값인 auto commit 을 수동 commit 으로 전환해보겠다. === //
			conn.setAutoCommit(false);
			// true : auto commit 활성화,  false : auto commit 비활성화 == 수동 commit으로 전환 
			
			
			// >>> 3. SQL문(편지) 을 작성한다. <<< //
			System.out.print("▷ 글쓴이 : ");
			String name = sc.nextLine(); // SQL 컬럼명과 일치시키는게 좋음.
			
			System.out.print("▷ 글내용 : ");
			String msg = sc.nextLine(); 
			
			/*
			String sql = "insert into jdbc_tbl_memo(no, name, msg )"
					+ "values(jdbc_seq_memo.nextval, '"+name+"', '"+msg+"')"; 
			// 오라클에서 varchar2 입력시 ' ' 안에 쓰기 때문에 넣어준다.
			// 되긴 하지만 권장사항이 아님. 이렇게 하지 말고 아래와 같이 위치홀더를 사용하자.
			*/
			
			
			String sql = "insert into jdbc_tbl_memo(no, name, msg )"
					+ "values(jdbc_seq_memo.nextval, ?, ?)"; // SQL문 맨 뒤에 ; 을 넣으면 오류!!
			// ? 를 "위치홀더" 라고 부른다. 위치홀더는 ' ' 안쓴다!!!
		
			
			
			// >>> 4. 연결한 오라클서버(conn)에 SQL문(편지)을 전달할 PreparedStatement 객체(우편배달부) 생성하기 <<< //
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, name); // 1 은 String sql 에서 첫번째 위치홀더(?)를 말한다. 첫번째 위치홀더(?)에 name 을 넣어준다.
			// '1' 번째 위치홀더에 'name'을 넣겠다.
			pstmt.setString(2, msg);
			// '2' 번째 위치홀더에 'msg' 를 넣겠다.
			
			System.out.println("SQL 문장 : " + sql);
			
			
			// >>> 5. PreparedStatement pstmt 객체(우편배달부)는 작성된 SQL문(편지)을 오라클 서버에 보내서 실행이 되도록 해야 한다 <<< //
			int n = pstmt.executeUpdate();
			/*  .executeUpdate(); 은 SQL문이 DML문(insert, update, delete, merge) 이거나 
            						 SQL문이 DDL문(create, drop, alter, truncate) 일 경우에 사용된다. 

			SQL문이 DML문이라면 return 되어지는 값은 적용되어진 행의 개수를 리턴시켜준다.
			예를 들어, insert into ... 하면 1 개행이 입력되므로 리턴값은 1 이 나온다. 
			 update ... 할 경우에 update 할 대상의 행의 개수가 5 이라면 리턴값은 5 가 나온다. 
			 delete ... 할 경우에 delete 되어질 대상의 행의 개수가 3 이라면 리턴값은 3 가 나온다.
			 
			SQL문이 DDL문이라면 return 되어지는 값은 무조건 0 이 리턴된다.       
			
			.executeQuery(); 은 SQL문이 DQL문(select) 일 경우에 사용된다.
			*/
			
			System.out.println("n : " + n);
			
			//////////////////////////////////////////////////////////////////////////////
	
			if(n == 1) {
					
				String yn = "";
				do {
						
					System.out.print(" ▷ 정말로 입력하시겠습니까? [Y/N] : ");
					yn = sc.nextLine();
					
					if("y".equalsIgnoreCase(yn)) {
						// 입력한 문자가 y라면
						conn.commit();
						System.out.println(">> 데이터 입력 성공!! <<");
					}
					else if("n".equalsIgnoreCase(yn)) {
						conn.rollback(); // 롤백
						System.out.println(">> 데이터 입력 취소!! <<");
					}
					else {
						System.out.println(">> Y 또는 N 만 입력하세요!! << \n");
					}
					
				} while( !("y".equalsIgnoreCase(yn) || "n".equalsIgnoreCase(yn) ) );
					
			} // end of if(n == 1)----------------------------
				


				////////////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// 4. update를 이용하여 수정해보자.
		/////////////////////////////////////////////////////////////////////////
			
			System.out.print(" ▷ 수정할 글번호 : ");
			String no = sc.nextLine();
			
			
			sql = " select name, msg"
				+ " from jdbc_tbl_memo "
				+ " where no = ? ";
			
			pstmt.close();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, no);
			
			rs.close();
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				
				String name = rs.getString(1); // select 의 첫번쨰 Column 인 name
				String msg = rs.getString(2); // select 의 두번쨰 Column 인 msg
				
				System.out.println("\n=== 수정하기 전 내용 ===");
				System.out.println("\n ★ 글쓴이 : " + name);
				System.out.println(" ★ 글내용 : " + msg);				

				System.out.println("\n=== 글 수정하기 ===");
				System.out.print(" ▷ 글쓴이 : ");
				name = sc.nextLine();
				System.out.print(" ▷ 글내용 : ");
				msg = sc.nextLine();
				
				sql = " update jdbc_tbl_memo set name = ? "
						+ "                        , msg = ? "
						+ " where no = ? ";
					
					pstmt = conn.prepareStatement(sql);
					pstmt.setString(1, name);
					pstmt.setString(2, msg);
					pstmt.setString(3, no);
				
				int n = pstmt.executeUpdate(); // no 는 항상 1이 나옴. Primary Key 이기 때문에.
				String yn = "";
				
				do {
					
					if(n==1) {
						// n==1 이라는 뜻은 update 구문이 성공했다는 말이다.
						
						System.out.print(" ▷ 정말로 수정하시겠습니까?[Y/N] : ");
						yn = sc.nextLine();
						
						if("y".equalsIgnoreCase(yn)) {
							conn.commit(); // 수정할거다!(커밋)
							System.out.println(">> 데이터 수정 성공!! <<");
							System.out.println("\n=== 수정 후 내용 ===");
							
							sql = " select name, msg "
								+ " from jdbc_tbl_memo "
								+ " where no = ? ";
							
							pstmt= conn.prepareStatement(sql);
							pstmt.setString(1, no);
							
							rs = pstmt.executeQuery();
							
							rs.next();
							
							name = rs.getString(1);
							msg = rs.getString(2);
							
							System.out.println("\n ☆ 글쓴이 : " + name);
							System.out.println(" ☆ 글내용 : " + msg);		
							
						}
						else if("n".equalsIgnoreCase(yn)) {
							conn.rollback(); // 잠깐만..(롤백)
							System.out.println(">> 데이터 수정 취소. <<");
						}
						else {
							System.out.println(">>> Y 또는 N 만 입력하세요!! <<< \n");
						}
						
					}// end of if(n==1)--------------------
				
				} while( !("y".equalsIgnoreCase(yn) || "n".equalsIgnoreCase(yn)) );	
				
			} 
			else {
				System.out.println(" >>> 글번호 " + no + "는 존재하지 않습니다. <<< \n");
			}// end of if(rs.next())--------------------------------
			
		} catch (ClassNotFoundException e) {
			System.out.println(">> ojdbc6.jar 파일이 없습니다. << ");
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			/// >>> 6. 사용하였던 자원을 반납하기 <<< //
			// 반납의 순서는 생성순서의 역순으로 한다.
			
			try {
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				} // 이렇게 해야 Exception 에러가 뜨지 않음.
			} catch (SQLException e) {
				
			}
			
		}
        
        
        
        sc.close();
        System.out.println("~~~ 프로그램 종료 ~~~");
		
	} // end of main(String[] args) ---------------------------

}

///////////////////////////////////////////////////////////////==================================================================
2. where로 찾아보자.

package jdbc.day01;

import java.sql.*;
import java.util.Scanner;

public class DQL_select_02 {

	public static void main(String[] args) {
		
		Connection conn = null;
		
		PreparedStatement pstmt = null;
		// PreparedStatement pstmt 은 Connection conn(연결할 오라클 서버)에 전송할 SQL문(편지)을 전달할 객체(우편배달부)이다.
		
		ResultSet rs = null;
		
		Scanner sc = new Scanner(System.in);

        try {
			// >>> 1. 오라클 드라이버 로딩 <<<  //

			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// >>> 2. 어떤 오라클 서버와 연결을 할래? <<< //
			System.out.print("▷ 연결할 오라클 서버의 IP 주소 : ");
			String ip = sc.nextLine();
			
			conn = DriverManager.getConnection("jdbc:oracle:thin:@"+ip+":1521:xe", "HR", "cclass");
			
			
			// >>> 3. SQL문(편지) 을 작성한다. <<< //\
			String sql = " select no, name, msg, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday "
						+ " from jdbc_tbl_memo "
						+ " order by no desc ";
			// Java에서 SQL로 넘어갈 때 공백을 주지 않으면 그대로 이어져서 실행이 되지 않음 (ex AS writedayfrom 으로 되서 실행X)

			
		
			
			
			// >>> 4. 연결한 오라클서버(conn)에 SQL문(편지)을 전달할 PreparedStatement 객체(우편배달부) 생성하기 <<< //
			pstmt = conn.prepareStatement(sql);
			
			
			// >>> 5. PreparedStatement pstmt 객체(우편배달부)는 작성된 SQL문(편지)을 오라클 서버에 보내서 실행이 되도록 해야 한다 <<< //
			rs = pstmt.executeQuery();
			/* SQL문이 DQL(select) 문이므로 .executeQuery();이다.
				pstmt.executeQuery(); 을 실행하면 select 되어진 결과물을 가져오는데 그 타입은 ResultSet 으로 가져온다.
			*/
			
			
			/*
            === 인터페이스 ResultSet 의 주요한 메소드 ===
            1. next()  : select 되어진 결과물에서 커서를 다음으로 옮겨주는 것             리턴타입은 boolean 
            2. first() : select 되어진 결과물에서 커서를 가장 처음으로 옮겨주는 것       리턴타입은 boolean
            3. last()  : select 되어진 결과물에서 커서를 가장 마지막으로 옮겨주는 것    리턴타입은 boolean
            
            == 커서가 위치한 행에서 컬럼의 값을 읽어들이는 메소드 ==
            getInt(숫자) : 컬럼의 타입이 숫자이면서 정수로 읽어들이때
                           파라미터 숫자는 컬럼의 위치값 
                          
            getInt(문자) : 컬럼의 타입이 숫자이면서 정수로 읽어들이때
                           파라미터 문자는 컬럼명 또는 alias명 
                           
            getLong(숫자) : 컬럼의 타입이 숫자이면서 정수로 읽어들이때
                              파라미터 숫자는 컬럼의 위치값 
                          
            getLong(문자) : 컬럼의 타입이 숫자이면서 정수로 읽어들이때
                              파라미터 문자는 컬럼명 또는 alias명                
            
            getFloat(숫자) : 컬럼의 타입이 숫자이면서 실수로 읽어들이때
                               파라미터 숫자는 컬럼의 위치값 
                          
            getFloat(문자) : 컬럼의 타입이 숫자이면서 실수로 읽어들이때
                               파라미터 문자는 컬럼명 또는 alias명 
                               
            getDouble(숫자) : 컬럼의 타입이 숫자이면서 실수로 읽어들이때
                                 파라미터 숫자는 컬럼의 위치값 
                          
            getDouble(문자) : 컬럼의 타입이 숫자이면서 실수로 읽어들이때
                                 파라미터 문자는 컬럼명 또는 alias명    
                                 
            getString(숫자) : 컬럼의 타입이 문자열로 읽어들이때
                                 파라미터 숫자는 컬럼의 위치값 
                          
            getString(문자) : 컬럼의 타입이 문자열로 읽어들이때
                                 파라미터 문자는 컬럼명 또는 alias명                                                        
			 */
			
			System.out.println("---------------------------------------------------------------------------");
			System.out.println("글번호\t글쓴이\t글내용\t작성일자");
			System.out.println("---------------------------------------------------------------------------");
			
			StringBuilder sb = new StringBuilder();
			
			while(rs.next()) {
				/*
	               rs.next() 는 select 되어진 결과물에서 위치(행의 위치)를 다음으로 옮긴 후 
	                 행이 존재하면 true 를 리턴해주고, 행이 없으면 false 를 리턴해주는 메소드이다.
	            */
				
				/*
				int no = rs.getInt("NO"); // "NO" 는 select 해온 컬럼명이다. 
				String name = rs.getString("NAME"); // "NAME" 는 select 해온 컬럼명이다. 
				String msg = rs.getString("MSG"); // "MSG" 는 select 해온 컬럼명이다. 
				String writeday = rs.getString("WRITEDAY"); // "WRITEDAY" 는 select 해온 컬럼명이다. 
				*/
				// 또는 
				
				int no = rs.getInt(1); // 1 은 select 해온 첫번째 컬럼명이다. 
				String name = rs.getString(2); //  2 는 select 해온 두번째 컬럼명이다. 
				String msg = rs.getString(3); //  3 은 select 해온 세번째 컬럼명이다. 
				String writeday = rs.getString(4); //  4 는 select 해온 네번째 컬럼명이다. 
				
				sb.append(no);
				sb.append("\t"+name);
				sb.append("\t"+msg);
				sb.append("\t"+writeday+"\n");
				
				
			} // end of while ------------------------------------------------
			
			System.out.println(sb.toString());
			
			//===============================================================================================================
      // 3. select를 사용해보자.
			
      String str_menuNo = "";
	        
	        do {
	        
		        System.out.println(menu);
		        System.out.print("▷ 번호선택 : ");
		        str_menuNo = sc.nextLine();

		        String colName = ""; // where 절에 들어올 컬럼명
		        
		        switch (str_menuNo) {
					case "1": // 글번호로 검색
						colName = "no";
						break;
						
					case "2": // 글쓴이로 검색
						colName = "name";
						break;
						
					case "3": // 글내용으로 검색
						colName = "msg";
						break;
						
					case "4": // 종료
						
						break;	
		
					default:
						System.out.println("~~~ 메뉴에 없는 번호입니다. ~~~ \n");
						break;
				} // end of switch-------------------------------
		        
		        if( "1".equals(str_menuNo) || "2".equals(str_menuNo) || "3".equals(str_menuNo) ) {
			        System.out.print("▷ 검색어 : ");
			        String search = sc.nextLine();
			        
			        
			        sql = " select no, name, msg, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday "
							+ " from jdbc_tbl_memo ";
			        
			        if( !("3".equals(str_menuNo)) ) { // 글번호 또는 글쓴이로 검색시
			        	sql += " where " + colName + " = ? ";
			        	//  !!! 컬럼명 또는 테이블명 은 위치홀더인 ? 를 쓰면 안되고 변수로 처리 해야한다. !!! **** 매우 중요 ****
		                //  !!! 데이터값만 위치홀더인 ? 를 써야 한다. !!!
			        }
			        else { // 글내용으로 검색시
			        	sql += " where " + colName + " like  '%'|| ? ||'%' ";
			        }
			    
			        sql += " order by no desc ";
			        
			        pstmt = conn.prepareStatement(sql);
			        pstmt.setString(1, search);
			        
			        rs = pstmt.executeQuery(); // SQL 문을 실행해라. return 타입은 rs
			        
			        // === StringBuilder sb 을 초기화 하기 === //
					sb = new StringBuilder();
					// 또는
					// sb.setLength(0);
					
					int cnt = 0;
					
					while(rs.next()) {
						cnt++;
						
						if(cnt == 1) {
							System.out.println("---------------------------------------------------------------------------");
							System.out.println("글번호\t글쓴이\t글내용\t작성일자");
							System.out.println("---------------------------------------------------------------------------");
						}
						
						int no = rs.getInt(1); // 1 은 select 해온 첫번째 컬럼명이다. 
						String name = rs.getString(2); //  2 는 select 해온 두번째 컬럼명이다. 
						String msg = rs.getString(3); //  3 은 select 해온 세번째 컬럼명이다. 
						String writeday = rs.getString(4); //  4 는 select 해온 네번째 컬럼명이다. 
						
						sb.append(no);
						sb.append("\t"+name);
						sb.append("\t"+msg);
						sb.append("\t"+writeday+"\n");
						
					} // end of while(rs.next()) ------------------------------------
			        
			        if(cnt > 0) { // 검색한 대상이 존재하는 경우
			        	System.out.println(sb.toString());
			        }
			        else { // 검색한 대상이 존재하지 않는 경우
			        	String searchType = "";
			        	
			        	switch (str_menuNo) {
						case "1":
							searchType = "글번호";
							break;
						case "2":
							searchType = "글쓴이 중";						
							break;
						case "3":
							searchType = "글내용 중";
							break;
						}
			        	
			        	System.out.println(">>> " + searchType + " " + search + "에 해당하는 데이터가 없습니다. <<< \n");
			        }
					
					
		        } // end of if---------------------------------------
	        
	        } while( !("4".equals(str_menuNo) ) ); // end of do~while ---------------------------------------------
			
			
		} catch (ClassNotFoundException e) {
			System.out.println(">> ojdbc6.jar 파일이 없습니다. << ");
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			/// >>> 6. 사용하였던 자원을 반납하기 <<< //
			// 반납의 순서는 생성순서의 역순으로 한다.
			
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				} // 이렇게 해야 Exception 에러가 뜨지 않음.
			} catch (SQLException e) {
				
			}
			
		}
        
        
        
        sc.close();
        System.out.println("~~~ 프로그램 종료 ~~~");
		
	} // end of main(String[] args) ---------------------------

